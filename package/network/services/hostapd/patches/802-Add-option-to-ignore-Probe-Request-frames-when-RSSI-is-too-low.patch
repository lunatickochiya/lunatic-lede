From d83eaa351e950e11d14e856acf35acf1567c9656 Mon Sep 17 00:00:00 2001
From: John Crispin <john@phrozen.org>
Date: Wed, 12 Aug 2020 18:55:31 +0200
Subject: [PATCH] Add option to ignore Probe Request frames when RSSI is too
 low

Add a new hostapd configuration parameters rssi_ignore_probe_request to
ignore Probe Request frames received with too low RSSI.

Signed-off-by: John Crispin <john@phrozen.org>
---
 hostapd/config_file.c | 2 ++
 hostapd/hostapd.conf  | 4 ++++
 src/ap/ap_config.h    | 1 +
 src/ap/beacon.c       | 4 ++++
 4 files changed, 11 insertions(+)

--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4393,6 +4393,8 @@ static int hostapd_config_fill(struct ho
 		conf->rssi_reject_assoc_rssi = atoi(pos);
 	} else if (os_strcmp(buf, "rssi_reject_assoc_timeout") == 0) {
 		conf->rssi_reject_assoc_timeout = atoi(pos);
+	} else if (os_strcmp(buf, "rssi_ignore_probe_request") == 0) {
+		conf->rssi_ignore_probe_request = atoi(pos);
 	} else if (os_strcmp(buf, "pbss") == 0) {
 		bss->pbss = atoi(pos);
 #ifdef CONFIG_AIRTIME_POLICY
--- a/hostapd/hostapd.conf
+++ b/hostapd/hostapd.conf
@@ -2546,6 +2546,10 @@ own_ip_addr=127.0.0.1
 # threshold (range: 0..255, default=30).
 #rssi_reject_assoc_timeout=30
 
+# Ignore Probe Request frames if RSSI is below given threshold (in dBm)
+# Allowed range: -60 to -90 dBm; default = 0 (rejection disabled)
+#rssi_ignore_probe_request=-75
+
 ##### Fast Session Transfer (FST) support #####################################
 #
 # The options in this section are only available when the build configuration
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1000,6 +1000,7 @@ struct hostapd_config {
 
 	int rssi_reject_assoc_rssi;
 	int rssi_reject_assoc_timeout;
+	int rssi_ignore_probe_request;
 
 #ifdef CONFIG_AIRTIME_POLICY
 	enum {
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -753,6 +753,10 @@ void handle_probe_req(struct hostapd_dat
 		.elems = &elems,
 	};
 
+	if (hapd->iconf->rssi_ignore_probe_request && ssi_signal &&
+	    ssi_signal < hapd->iconf->rssi_ignore_probe_request)
+		return;
+
 	if (len < IEEE80211_HDRLEN)
 		return;
 	ie = ((const u8 *) mgmt) + IEEE80211_HDRLEN;
