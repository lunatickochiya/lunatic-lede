--- a/drivers/net/imq.c
+++ b/drivers/net/imq.c
@@ -757,17 +757,321 @@ static const struct nf_queue_handler imq
 	.outfn = imq_nf_queue,
 };
 
+static inline char *kernel_strdup(const char *str)
+{
+	char *tmp;
+	long int s;
+	s = strlen(str) + 1;
+	tmp = kmalloc(s, GFP_ATOMIC);
+	if (tmp != NULL)
+	{
+		memcpy(tmp, str, s);
+	}
+	return tmp;
+}
+
+/*
+ * line is the line to be parsed -- it is not modified in any way
+ * max_pieces indicates number of pieces to return, if negative this is determined dynamically
+ * include_remainder_at_max indicates whether the last piece, when max pieces are reached,
+ * 	should be what it would normally be (0) or the entire remainder of the line (1)
+ * 	if max_pieces < 0 this parameter is ignored
+ *
+ *
+ * returns all non-separator pieces in a line
+ * result is dynamically allocated, MUST be freed after call-- even if
+ * line is empty (you still get a valid char** pointer to to a NULL char*)
+ */
+char** split_on_separators(char* line, char* separators, int num_separators, int max_pieces,
+				int include_remainder_at_max, unsigned long *num_pieces)
+{
+	char** split;
+
+	*num_pieces = 0;
+	if (line != NULL)
+	{
+		int split_index;
+		int non_separator_found;
+		char* dup_line;
+		char* start;
+
+		if (max_pieces < 0)
+		{
+			/* count number of separator characters in line -- this count + 1 is an upperbound on number of pieces */
+			int separator_count = 0;
+			int line_index;
+			for (line_index = 0; line[line_index] != '\0'; line_index++)
+			{
+				int sep_index;
+				int found = 0;
+				for (sep_index = 0; found == 0 && sep_index < num_separators; sep_index++)
+				{
+					found = separators[sep_index] == line[line_index] ? 1 : 0;
+				}
+				separator_count = separator_count + found;
+			}
+			max_pieces = separator_count + 1;
+		}
+		split = (char**) kmalloc((1 + max_pieces) * sizeof(char*), GFP_ATOMIC);
+		split_index = 0;
+		split[split_index] = NULL;
+
+		dup_line = kernel_strdup(line);
+		start = dup_line;
+		non_separator_found = 0;
+		while (non_separator_found == 0)
+		{
+			int matches = 0;
+			int sep_index;
+			for (sep_index = 0; sep_index < num_separators; sep_index++)
+			{
+				matches = matches == 1 || separators[sep_index] == start[0] ? 1 : 0;
+			}
+			non_separator_found = matches == 0 || start[0] == '\0' ? 1 : 0;
+			if (non_separator_found == 0)
+			{
+				start++;
+			}
+		}
+
+		while (start[0] != '\0' && split_index < max_pieces)
+		{
+			/* find first separator index */
+			int first_separator_index = 0;
+			int separator_found = 0;
+			while (separator_found == 0)
+			{
+				int sep_index;
+				for (sep_index = 0; separator_found == 0 && sep_index < num_separators; sep_index++)
+				{
+					separator_found = separators[sep_index] == start[first_separator_index] || start[first_separator_index] == '\0' ? 1 : 0;
+				}
+				if (separator_found == 0)
+				{
+					first_separator_index++;
+				}
+			}
+
+			/* copy next piece to split array */
+			if (first_separator_index > 0)
+			{
+				char* next_piece = NULL;
+				if (split_index + 1 < max_pieces || include_remainder_at_max <= 0)
+				{
+					next_piece = (char*) kmalloc((first_separator_index + 1) * sizeof(char), GFP_ATOMIC);
+					memcpy(next_piece, start, first_separator_index);
+					next_piece[first_separator_index] = '\0';
+				}
+				else
+				{
+					next_piece = kernel_strdup(start);
+				}
+				split[split_index] = next_piece;
+				split[split_index + 1] = NULL;
+				split_index++;
+			}
+
+			/* find next non-separator index, indicating start of next piece */
+			start = start + first_separator_index;
+			non_separator_found = 0;
+			while (non_separator_found == 0)
+			{
+				int matches = 0;
+				int sep_index;
+				for (sep_index = 0; sep_index < num_separators; sep_index++)
+				{
+					matches = matches == 1 || separators[sep_index] == start[0] ? 1 : 0;
+				}
+				non_separator_found = matches == 0 || start[0] == '\0' ? 1 : 0;
+				if (non_separator_found == 0)
+				{
+					start++;
+				}
+			}
+		}
+		kfree(dup_line);
+		*num_pieces = split_index;
+	}
+	else
+	{
+		split = (char**) kmalloc((1) * sizeof(char*), GFP_ATOMIC);
+		split[0] = NULL;
+	}
+	return split;
+}
+
+/* returns number freed */
+int free_null_terminated_string_array(char** strs)
+{
+	unsigned long str_index;
+	if (strs != NULL)
+	{
+		for (str_index = 0; strs[str_index] != NULL; str_index++)
+		{
+			kfree(strs[str_index]);
+		}
+		kfree(strs);
+	}
+	return str_index;
+}
+
+#if defined(CONFIG_IMQ_BEHAVIOR_BA) || defined(CONFIG_IMQ_BEHAVIOR_BB)
+	#define DEFAULT_PRE_TABLE "mangle"
+#else
+	#define DEFAULT_PRE_TABLE "nat"
+#endif
+
+#if defined(CONFIG_IMQ_BEHAVIOR_AA) || defined(CONFIG_IMQ_BEHAVIOR_BA)
+	#define DEFAULT_POST_TABLE "nat"
+#else
+	#define DEFAULT_POST_TABLE "mangle"
+#endif
+
+static char* hook_chains = "PREROUTING,POSTROUTING";
+static char* hook_tables = DEFAULT_PRE_TABLE","DEFAULT_POST_TABLE;
+
+static struct nf_hook_ops* hook_list = NULL;
+static int hook_list_length = 0;
+
 static int __init imq_init_hooks(void)
 {
-	int ret;
+	char separators[4] = {',', ' ', '\t', '\0' };
+	unsigned long num_chains;
+	unsigned long num_tables;
+	char** chain_list = split_on_separators(hook_chains, separators, 3, -1, 0, &num_chains);
+	char** table_list = split_on_separators(hook_tables, separators, 3, -1, 0, &num_tables);
+	int hook_index;
 
 	nf_register_queue_imq_handler(&imq_nfqh);
 
-	ret = nf_register_hooks(imq_ops, ARRAY_SIZE(imq_ops));
-	if (ret < 0)
-		nf_unregister_queue_imq_handler();
+	hook_list_length = 0;
+	if (num_chains != num_tables)
+	{
+		printk("ERROR: must have same number of chains and tables\n");
+		return -1;
+	}
 
-	return ret;
+	/* we multiply by 2 here since we need hooks for both IPv4 and IPv6 */
+	hook_list = (struct nf_hook_ops*) kmalloc(sizeof(struct nf_hook_ops) * ((num_chains * 2) + 1), GFP_ATOMIC);
+
+	for (hook_index = 0; hook_index < num_chains; hook_index++)
+	{
+		char* chain = chain_list[hook_index];
+		char* table = table_list[hook_index];
+		int valid = 0;
+		if (strcmp(chain, "PREROUTING") == 0 ||
+		    strcmp(chain, "POSTROUTING") == 0 ||
+		    strcmp(chain, "INPUT") == 0 ||
+		    strcmp(chain, "FORWARD") == 0 ||
+		    strcmp(chain, "OUTPUT") == 0)
+		{
+			if (strcmp(table, "mangle") == 0 ||
+			    (strcmp(table, "nat") == 0 &&
+			     strcmp(chain, "FORWARD") != 0 &&
+			     strcmp(chain, "INPUT") != 0) ||
+			    (strcmp(table, "filter") == 0 &&
+			     strcmp(chain, "PREROUTING") != 0 &&
+			     strcmp(chain, "POSTROUTING") != 0))
+			{
+				unsigned int chain_id = NF_INET_PRE_ROUTING;
+				int table_id = NF_IP_PRI_MANGLE;
+				int err = 0;
+
+				valid = 1;
+
+				if (strcmp(chain, "PREROUTING") == 0)
+				{
+					chain_id = NF_INET_PRE_ROUTING;
+				}
+				else if (strcmp(chain, "POSTROUTING") == 0)
+				{
+					chain_id = NF_INET_POST_ROUTING;
+				}
+				else if (strcmp(chain, "INPUT") == 0)
+				{
+					chain_id = NF_INET_LOCAL_IN;
+				}
+				else if (strcmp(chain, "FORWARD") == 0)
+				{
+					chain_id = NF_INET_FORWARD;
+				}
+				else if (strcmp(chain, "OUTPUT") == 0)
+				{
+					chain_id = NF_INET_LOCAL_OUT;
+				}
+
+				if (strcmp(table, "mangle") == 0)
+				{
+					table_id = NF_IP_PRI_MANGLE + 1;
+				}
+				else if (strcmp(table, "nat") == 0 && strcmp(chain, "POSTROUTING") == 0)
+				{
+					table_id = NF_IP_PRI_NAT_SRC + 1;
+				}
+				else if (strcmp(table, "nat") == 0 && strcmp(chain, "POSTROUTING") != 0)
+				{
+					table_id = NF_IP_PRI_NAT_DST + 1;
+				}
+				else if (strcmp(table, "filter") == 0)
+				{
+					table_id = NF_IP_PRI_FILTER + 1;
+				}
+
+				(hook_list[hook_list_length]).hook = imq_nf_hook;
+				// (hook_list[hook_list_length]).owner = THIS_MODULE;
+				(hook_list[hook_list_length]).pf = PF_INET;
+				(hook_list[hook_list_length]).hooknum = chain_id;
+				(hook_list[hook_list_length]).priority = table_id;
+				err = nf_register_hook( (hook_list + hook_list_length) );
+				hook_list_length++;
+
+				#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+					if (strcmp(table, "mangle") == 0)
+					{
+						table_id = NF_IP6_PRI_MANGLE + 1;
+					}
+					else if (strcmp(table, "nat") == 0 && strcmp(chain, "POSTROUTING") == 0)
+					{
+						table_id = NF_IP6_PRI_NAT_SRC + 1;
+					}
+					else if (strcmp(table, "nat") == 0 && strcmp(chain, "POSTROUTING") != 0)
+					{
+						table_id = NF_IP6_PRI_NAT_DST + 1;
+					}
+					else if (strcmp(table, "filter") == 0)
+					{
+						table_id = NF_IP6_PRI_FILTER + 1;
+					}
+
+					(hook_list[hook_list_length]).hook = imq_nf_hook;
+					// (hook_list[hook_list_length]).owner = THIS_MODULE;
+					(hook_list[hook_list_length]).pf = PF_INET6;
+					(hook_list[hook_list_length]).hooknum = chain_id;
+					(hook_list[hook_list_length]).priority = table_id;
+					nf_register_hook( (hook_list + hook_list_length) );
+					hook_list_length++;
+				#endif
+
+
+				if (err)
+				{
+					printk(KERN_INFO "\tError hooking IMQ after %s on %s\n", table, chain);
+				}
+				else
+				{
+					printk(KERN_INFO "\tHooked IMQ after %s on %s\n", table, chain);
+				}
+			}
+		}
+		if (valid == 0)
+		{
+			printk("ERROR: invalid chain/table at index %d (%s/%s)\n", hook_index, chain, table);
+		}
+	}
+	free_null_terminated_string_array(chain_list);
+	free_null_terminated_string_array(table_list);
+
+	return 0;
 }
 
 static int __init imq_init_one(int index)
@@ -870,8 +1174,16 @@ static int __init imq_init_module(void)
 
 static void __exit imq_unhook(void)
 {
-	nf_unregister_hooks(imq_ops, ARRAY_SIZE(imq_ops));
+	int hook_index;
+	for (hook_index = 0; hook_index < hook_list_length; hook_index++)
+	{
+		nf_unregister_hook( (hook_list + hook_index) );
+	}
+
 	nf_unregister_queue_imq_handler();
+
+	kfree(hook_list);
+	hook_list_length = 0;
 }
 
 static void __exit imq_cleanup_devs(void)
@@ -893,9 +1205,14 @@ module_exit(imq_exit_module);
 module_param(numdevs, int, 0);
 module_param(numqueues, int, 0);
 module_param(imq_dev_accurate_stats, int, 0);
+module_param(hook_chains, charp, 0);
+module_param(hook_tables, charp, 0);
+
 MODULE_PARM_DESC(numdevs, "number of IMQ devices (how many imq* devices will be created)");
 MODULE_PARM_DESC(numqueues, "number of queues per IMQ device");
 MODULE_PARM_DESC(imq_dev_accurate_stats, "Notify if need the accurate imq device stats");
+MODULE_PARM_DESC(hook_chains, "netfilter chains in which to insert hooks to IMQ");
+MODULE_PARM_DESC(hook_tables, "netfilter tables after which to insert hooks to IMQ");
 
 MODULE_AUTHOR("https://github.com/imq/linuximq");
 MODULE_DESCRIPTION("Pseudo-driver for the intermediate queue device. See https://github.com/imq/linuximq/wiki for more information.");
